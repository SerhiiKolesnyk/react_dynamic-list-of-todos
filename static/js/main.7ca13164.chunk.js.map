{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","titleFilter","selectedUser","selectUser","setTodosStatus","changeHandler","rendom","className","htmlFor","id","type","name","value","onChange","target","event","onClick","map","title","completed","userId","key","checked","readOnly","API_URL","request","endpoint","query","fetch","then","response","json","CurrentUser","state","user","this","props","data","setState","prevProps","email","phone","clearUser","React","Component","App","selectedId","filter","todosStatus","setStatus","status","rendomFilter","sort","Math","random","prepareTodos","visibleTodos","trim","todo","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ca13164.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  titleFilter,\n  selectedUser,\n  selectUser,\n  setTodosStatus,\n  changeHandler,\n  rendom,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <label htmlFor=\"title-filter\" className=\"TodoList__input-label\">\n        {` Search by title name `}\n        <input\n          className=\"TodoList__title-search\"\n          id=\"title-filter\"\n          type=\"text\"\n          name=\"filter\"\n          value={titleFilter}\n          onChange={({ target }) => changeHandler(target)}\n        />\n      </label>\n\n      <label htmlFor=\"todo-status\" className=\"TodoList__input-label\">\n        {` Select todo status `}\n        <select\n          name=\"todo-status\"\n          id=\"todo-status\"\n          className=\"TodoList__status-select\"\n          onChange={event => setTodosStatus(event.target.value)}\n        >\n          <option\n            value=\"All\"\n          >\n            All\n          </option>\n          <option\n            value=\"Active\"\n          >\n            Active\n          </option>\n          <option\n            value=\"Completed\"\n          >\n            Completed\n          </option>\n        </select>\n      </label>\n\n      <button\n        type=\"button\"\n        className=\"TodoList__user-button\"\n        onClick={rendom}\n      >\n        Rendomize\n      </button>\n\n      <ul className=\"TodoList__list\">\n        {todos.map(({ id, title, completed, userId }) => (\n          <li\n            key={id}\n            className={\n              completed\n                ? 'TodoList__item TodoList__item--checked'\n                : 'TodoList__item TodoList__item--unchecked'\n            }\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={completed}\n                readOnly\n              />\n              <p>{title}</p>\n            </label>\n\n            <button\n              className={\n                userId === selectedUser\n                  ? `\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    `\n                  : 'TodoList__user-button button'\n              }\n              type=\"button\"\n              onClick={() => {\n                selectUser(userId);\n              }}\n            >\n              {`User: #${userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    userId: PropTypes.number,\n  })).isRequired,\n  titleFilter: PropTypes.string.isRequired,\n  selectedUser: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  setTodosStatus: PropTypes.func.isRequired,\n  changeHandler: PropTypes.func.isRequired,\n  rendom: PropTypes.func.isRequired,\n};\n","const API_URL = `https://mate-api.herokuapp.com`;\n\nexport function request(endpoint, query) {\n  return fetch(\n    !query ? `${API_URL}${endpoint}` : `${API_URL}${endpoint}${query}`,\n  )\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { request } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    request('/users', `/${this.props.userId}`)\n      .then(({ data }) => this.setState({ user: { ...data } }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      request('/users', `/${this.props.userId}`)\n        .then(({ data }) => this.setState({ user: { ...data } }));\n    }\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedId: 0,\n    filter: '',\n    todosStatus: 'All',\n  };\n\n  componentDidMount() {\n    request('/todos')\n      .then(({ data }) => this.setState({ todos: [...data] }));\n  }\n\n  changeHandler = ({ name, value }) => {\n    this.setState({ [name]: value });\n  }\n\n  setStatus = (status) => {\n    this.setState({ todosStatus: status });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedId: 0 });\n  }\n\n  selectUser = (userId) => {\n    this.setState((state) => {\n      if (state.selectedId === userId) {\n        return state;\n      }\n\n      return {\n        ...state,\n        selectedId: userId,\n      };\n    });\n  }\n\n  rendomFilter = () => {\n    const { todos } = this.state;\n\n    this.setState({\n      todos: [...todos].sort(() => 0.5 - Math.random()),\n    });\n  }\n\n  prepareTodos = () => {\n    const { todos, filter, todosStatus } = this.state;\n\n    let visibleTodos = [...todos];\n\n    if (todosStatus === 'Active') {\n      visibleTodos = [...todos].filter(({ completed }) => completed === false);\n    }\n\n    if (todosStatus === 'Completed') {\n      visibleTodos = [...todos].filter(({ completed }) => completed === true);\n    }\n\n    if (filter.trim()) {\n      visibleTodos = [...visibleTodos].filter(todo => (\n        (`${todo.title}`).toLowerCase().includes(filter.toLowerCase())\n      ));\n    }\n\n    return visibleTodos;\n  }\n\n  render() {\n    const { filter, selectedId } = this.state;\n    const visibleTodos = this.prepareTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__content\">\n          <TodoList\n            todos={visibleTodos}\n            selectedUser={selectedId}\n            titleFilter={filter}\n            changeHandler={this.changeHandler}\n            selectUser={this.selectUser}\n            setTodosStatus={this.setStatus}\n            rendom={this.rendomFilter}\n          />\n        </div>\n\n        <div className=\"App__sidebar\">\n          <div className=\"App__content-container\">\n            {selectedId ? (\n              <CurrentUser\n                userId={selectedId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}